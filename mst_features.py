# -*- coding: utf-8 -*-
"""MST-features.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kCoeFG7NUp8O1-ARnk4kgqI5Vbm6OA_m

Minimum spanning tree for graph based feature extraction
"""

pip install mistree #minimum spanning tree package

#import libraries
from __future__ import print_function
import numpy as np
import matplotlib.pylab as plt
import mistree as mist
from google.colab import files
import io
import pandas as pd
from mpl_toolkits import mplot3d
from mpl_toolkits.mplot3d.art3d import Line3DCollection
from statistics import mean
from statistics import stdev
from statistics import variance
from scipy.stats import describe, iqr

def readCentroids(filepath, ndims=3):
  """
  Read in nuclear centroids from csv file and retrun as pandas dataframe

  Parameters
  ----------

  filepath : str or pathlike
    path to csv file containing segmented nuclear features

  ndims : int
    int describing data as 2D or 3D default to 3
  
  Returns
  -------
  
    df : pandas dataframe
      dataframe object containing centroids
  """

  data = pd.read_csv(filepath)

  if ndims == 3:
    df = data.loc[:,['centroid0', 'centroid1', 'centroid2', 'morphology_region']]

  else: 
    df = data.loc[:,['centroid0', 'centroid1', 'morphology_region']]

  return df


def getMST(data, ndims=3, k_neighbours=30):
  """
  Generate minimum spanning tree from centroid data

  Parameters
  ----------

  data : pandas.DataFrame
    dataframe containing centroid data of nuclei

  ndims : int
    default 3, int determinine if data is 2D or 3D
  
  k_neighbours : int
    default 30, number of neighbours for MST object
  """

  x = np.array(data.centroid0)
  y = np.array(data.centroid1)

  if ndims==3:
    z = np.array(data.centroid2)

    mst = mist.GetMST(x=x, y=y, z=z)
  
  else:
    mst = mist.GetMST(x=x, y=y)
  
  mst.define_k_neighbours(k_neighbours)

  return mst


def getMSTFeats(mst):
  """
  Gets features of minimum spanning tree object
  

  Parameters
  ----------

  mst : mst object
    minimum spanning tree object generated by GetMST method from mistree


  Returns
  -------
  
  mst_props : dict
    dictionary containing statistics of features of mst objects, keys and stats
  listed below: 

    keys: 'degree', 
           'edge_length', 
           'branch_length', 
           'branch_shape', 
           'l_index',
           'b_index'

    stats : 'nobs',
            'mean',
            'minmax',
            'var',
            'skew',
            'kurt',
            'IQR'
  """

  def describeProperty(propdict, feat, key):
    """"
    updates input dictionary with statistics of feature of interst

    Parameters
    ----------

    propdict : dict
      parent dictionary to store calculated features

    feat : np.array
      array to generate statistics on
    
    key : str
      key to store stats in parent dictionary

    
    Returns
    -------

    propdict : dict
      updated parent dictionary with new key entry

    """
    propdict[key] = {}

    propdict[key]['nobs'], propdict[key]['minmax'], propdict[key]['mean'], \
    propdict[key]['var'], propdict[key]['skew'], propdict[key]['kurt'] = describe(feat)
    propdict[key]['IQR'] = iqr(feat)
    return propdict

  # generate empty dictionary for mst props
  mst_props = {}

  # calculate features of MST object
  features = mst.get_stats(include_index=True)
 
  # generate name list of each MST feature
  names = ['degree', 
           'edge_length', 
           'branch_length', 
           'branch_shape']

  # iterate through each features and name
  for feat, name in zip(features,names):

    # update mst_props dictionary using describeProperty
    mst_props = describeProperty(mst_props, feat, name)

  return mst_props

data = readCentroids("region_properties_1_reduced.csv", ndims=3)
mst = getMST(data, ndims=3, k_neighbours=30)
propdict = getMSTFeats(mst)

